#pragma kernel Setup
#pragma kernel Update
#pragma kernel Apply

#define THREAD [numthreads(8, 1, 1)]
#define DISCARD if(id.x > (uint)_InstancesCount) return;

#ifndef PI
#define PI 3.14159265359
#endif

#include "../Common/Random.cginc"
#include "../Common/Matrix.cginc"
#include "../Common/Quaternion.cginc"
#include "../Common/Noise/SimplexNoiseGrad3D.cginc"
#include "../Common/ProcSkinAnim.cginc"

int _InstancesCount;
RWStructuredBuffer<GPUBone> _Bones;
int _BonesCount;
float _BonesCountInv;

float4x4 _WorldToLocal, _LocalToWorld;

float4 _Time;
float2 _DT;

THREAD
void Setup (uint3 id : SV_DispatchThreadID)
{
    DISCARD

    int index = id.x * _BonesCount;

/*
    // for debug
    GPUBone root = _Bones[index];
    root.position.x = id.x % 8;
    root.position.y = id.x / 64;
    root.position.z = (id.x / 8) % 8;
    _Bones[index] = root;
*/

    float4x4 offset = _WorldToLocal;

    for (int i = 0; i < _BonesCount; i++) {
        GPUBone parent = _Bones[index + i - 1];
        GPUBone bone = _Bones[index + i];

        // convert global initial to local space 
        // bone.local = mul(bone.local, offset); // fail

        bone.local = mul(offset, bone.local); // success

        _Bones[index + i] = bone;

        offset = bone.offset; // with hierarchy
    }
}

THREAD
void Update (uint3 id : SV_DispatchThreadID)
{
    DISCARD
}

THREAD
void Apply (uint3 id : SV_DispatchThreadID)
{
    DISCARD

    int index = id.x * _BonesCount;

    GPUBone root = _Bones[index];

    /*
    float4x4 mat = mul(root.local, GetBoneMatrix(root));
    root.comb = mul(mat, root.offset);

    _Bones[offset] = root;

    for (int i = 1; i < _BonesCount; i++) {
        GPUBone child = _Bones[offset + i];

        mat = mul(mat, mul(child.local, GetBoneMatrix(child)));
        child.comb = mul(mat, child.offset);

        _Bones[offset + i] = child;
    }
    */

    float4x4 offset = _LocalToWorld;

    for (int i = 0; i < _BonesCount; i++) {
        GPUBone bone = _Bones[index + i];

        float4x4 diff = GetBoneMatrix(bone);
        // offset = mul(offset, mul(bone.local, diff));
        offset = mul(offset, mul(diff, bone.local));

        bone.comb = mul(offset, bone.offset); // with hierarchy ver.
        // bone.comb = mul(mul(offset, mul(bone.local, GetBoneMatrix(bone))), bone.offset); // without hierarchy ver

        _Bones[index + i] = bone;
    }

}
